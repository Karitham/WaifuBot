// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id)
VALUES ($1)
`

func (q *Queries) CreateUser(ctx context.Context, userID int64) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser, userID)
	return err
}

const getChar = `-- name: GetChar :one
SELECT user_id, id, image, name, date, type
FROM characters
WHERE id = $1
    AND characters.user_id = $2
`

type GetCharParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetChar(ctx context.Context, arg GetCharParams) (Character, error) {
	row := q.queryRow(ctx, q.getCharStmt, getChar, arg.ID, arg.UserID)
	var i Character
	err := row.Scan(
		&i.UserID,
		&i.ID,
		&i.Image,
		&i.Name,
		&i.Date,
		&i.Type,
	)
	return i, err
}

const getChars = `-- name: GetChars :many
SELECT user_id, id, image, name, date, type
FROM characters
WHERE characters.user_id = $1
`

func (q *Queries) GetChars(ctx context.Context, userID int64) ([]Character, error) {
	rows, err := q.query(ctx, q.getCharsStmt, getChars, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.UserID,
			&i.ID,
			&i.Image,
			&i.Name,
			&i.Date,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const giveChar = `-- name: GiveChar :one
UPDATE characters
SET "type" = 'TRADE',
    "user_id" = $1
WHERE characters.id = $2
    AND characters.user_id = $3
RETURNING user_id, id, image, name, date, type
`

type GiveCharParams struct {
	Given int64 `json:"given"`
	ID    int64 `json:"id"`
	Giver int64 `json:"giver"`
}

func (q *Queries) GiveChar(ctx context.Context, arg GiveCharParams) (Character, error) {
	row := q.queryRow(ctx, q.giveCharStmt, giveChar, arg.Given, arg.ID, arg.Giver)
	var i Character
	err := row.Scan(
		&i.UserID,
		&i.ID,
		&i.Image,
		&i.Name,
		&i.Date,
		&i.Type,
	)
	return i, err
}

const insertChar = `-- name: InsertChar :exec
INSERT INTO characters ("id", "user_id", "image", "name", "type")
VALUES ($1, $2, $3, $4, $5)
`

type InsertCharParams struct {
	Image  string `json:"image"`
	Name   string `json:"name"`
	Type   string `json:"type"`
	ID     int64  `json:"id"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) InsertChar(ctx context.Context, arg InsertCharParams) error {
	_, err := q.exec(ctx, q.insertCharStmt, insertChar,
		arg.ID,
		arg.UserID,
		arg.Image,
		arg.Name,
		arg.Type,
	)
	return err
}
