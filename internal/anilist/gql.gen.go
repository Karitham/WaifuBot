package anilist

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// Media type enum, anime or manga.
type MediaType string

const (
	// Japanese Anime
	MediaTypeAnime MediaType = "ANIME"
	// Asian comic
	MediaTypeManga MediaType = "MANGA"
)

// __characterInput is used internally by genqlient
type __characterInput struct {
	Name string `json:"name"`
}

// __charactersRandomInput is used internally by genqlient
type __charactersRandomInput struct {
	PageNumber int64   `json:"pageNumber"`
	Not_in     []int64 `json:"not_in"`
}

// __mediaInput is used internally by genqlient
type __mediaInput struct {
	Name string    `json:"name"`
	Typ  MediaType `json:"typ"`
}

// __userInput is used internally by genqlient
type __userInput struct {
	Name string `json:"name"`
}

// characterPage includes the requested fields of the GraphQL type Page.
// The GraphQL type's documentation follows.
//
// Page of data
type characterPage struct {
	Characters []characterPageCharactersCharacter `json:"characters"`
}

// characterPageCharactersCharacter includes the requested fields of the GraphQL type Character.
// The GraphQL type's documentation follows.
//
// A character that features in an anime or manga
type characterPageCharactersCharacter struct {
	// The id of the character
	Id int64 `json:"id"`
	// The names of the character
	Name characterPageCharactersCharacterName `json:"name"`
	// A general description of the character
	Description string `json:"description"`
	// The url for the character page on the AniList website
	SiteUrl string `json:"siteUrl"`
	// Character images
	Image characterPageCharactersCharacterImage `json:"image"`
}

// characterPageCharactersCharacterImage includes the requested fields of the GraphQL type CharacterImage.
type characterPageCharactersCharacterImage struct {
	// The character's image of media at its largest size
	Large string `json:"large"`
}

// characterPageCharactersCharacterName includes the requested fields of the GraphQL type CharacterName.
// The GraphQL type's documentation follows.
//
// The names of the character
type characterPageCharactersCharacterName struct {
	// The character's first and last name
	Full string `json:"full"`
}

// characterResponse is returned by character on success.
type characterResponse struct {
	Page characterPage `json:"Page"`
}

// charactersRandomPage includes the requested fields of the GraphQL type Page.
// The GraphQL type's documentation follows.
//
// Page of data
type charactersRandomPage struct {
	Characters []charactersRandomPageCharactersCharacter `json:"characters"`
}

// charactersRandomPageCharactersCharacter includes the requested fields of the GraphQL type Character.
// The GraphQL type's documentation follows.
//
// A character that features in an anime or manga
type charactersRandomPageCharactersCharacter struct {
	// The id of the character
	Id int64 `json:"id"`
	// The url for the character page on the AniList website
	SiteUrl string `json:"siteUrl"`
	// Character images
	Image charactersRandomPageCharactersCharacterImage `json:"image"`
	// The names of the character
	Name charactersRandomPageCharactersCharacterName `json:"name"`
	// Media that includes the character
	Media charactersRandomPageCharactersCharacterMediaMediaConnection `json:"media"`
}

// charactersRandomPageCharactersCharacterImage includes the requested fields of the GraphQL type CharacterImage.
type charactersRandomPageCharactersCharacterImage struct {
	// The character's image of media at its largest size
	Large string `json:"large"`
}

// charactersRandomPageCharactersCharacterMediaMediaConnection includes the requested fields of the GraphQL type MediaConnection.
type charactersRandomPageCharactersCharacterMediaMediaConnection struct {
	Nodes []charactersRandomPageCharactersCharacterMediaMediaConnectionNodesMedia `json:"nodes"`
}

// charactersRandomPageCharactersCharacterMediaMediaConnectionNodesMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type charactersRandomPageCharactersCharacterMediaMediaConnectionNodesMedia struct {
	// The official titles of the media in various languages
	Title charactersRandomPageCharactersCharacterMediaMediaConnectionNodesMediaTitle `json:"title"`
}

// charactersRandomPageCharactersCharacterMediaMediaConnectionNodesMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type charactersRandomPageCharactersCharacterMediaMediaConnectionNodesMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
}

// charactersRandomPageCharactersCharacterName includes the requested fields of the GraphQL type CharacterName.
// The GraphQL type's documentation follows.
//
// The names of the character
type charactersRandomPageCharactersCharacterName struct {
	// The character's first and last name
	Full string `json:"full"`
}

// charactersRandomResponse is returned by charactersRandom on success.
type charactersRandomResponse struct {
	Page charactersRandomPage `json:"Page"`
}

// mediaPage includes the requested fields of the GraphQL type Page.
// The GraphQL type's documentation follows.
//
// Page of data
type mediaPage struct {
	Media []mediaPageMedia `json:"media"`
}

// mediaPageMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type mediaPageMedia struct {
	// The id of the media
	Id int64 `json:"id"`
	// The official titles of the media in various languages
	Title mediaPageMediaTitle `json:"title"`
	// Short description of the media's story and characters
	Description string `json:"description"`
	// The url for the media page on the AniList website
	SiteUrl string `json:"siteUrl"`
	// The cover images of the media
	CoverImage mediaPageMediaCoverImage `json:"coverImage"`
	// The banner image of the media
	BannerImage string `json:"bannerImage"`
}

// mediaPageMediaCoverImage includes the requested fields of the GraphQL type MediaCoverImage.
type mediaPageMediaCoverImage struct {
	// The cover image url of the media at a large size
	Large string `json:"large"`
	// Average #hex color of cover image
	Color string `json:"color"`
}

// mediaPageMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type mediaPageMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
}

// mediaResponse is returned by media on success.
type mediaResponse struct {
	Page mediaPage `json:"Page"`
}

// userPage includes the requested fields of the GraphQL type Page.
// The GraphQL type's documentation follows.
//
// Page of data
type userPage struct {
	Users []userPageUsersUser `json:"users"`
}

// userPageUsersUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user
type userPageUsersUser struct {
	// The id of the user
	Id int64 `json:"id"`
	// The name of the user
	Name string `json:"name"`
	// The bio written by user (Markdown)
	About string `json:"about"`
	// The url for the user page on the AniList website
	SiteUrl string `json:"siteUrl"`
	// The user's avatar images
	Avatar userPageUsersUserAvatar `json:"avatar"`
	// The user's banner images
	BannerImage string `json:"bannerImage"`
}

// userPageUsersUserAvatar includes the requested fields of the GraphQL type UserAvatar.
// The GraphQL type's documentation follows.
//
// A user's avatars
type userPageUsersUserAvatar struct {
	// The avatar of user at its largest size
	Large string `json:"large"`
}

// userResponse is returned by user on success.
type userResponse struct {
	Page userPage `json:"Page"`
}

func character(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*characterResponse, error) {
	__input := __characterInput{
		Name: name,
	}
	var err error

	var retval characterResponse
	err = client.MakeRequest(
		ctx,
		"character",
		`
query character ($name: String) {
	Page(page: 1, perPage: 3) {
		characters(search: $name) {
			id
			name {
				full
			}
			description
			siteUrl
			image {
				large
			}
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func charactersRandom(
	ctx context.Context,
	client graphql.Client,
	pageNumber int64,
	not_in []int64,
) (*charactersRandomResponse, error) {
	__input := __charactersRandomInput{
		PageNumber: pageNumber,
		Not_in:     not_in,
	}
	var err error

	var retval charactersRandomResponse
	err = client.MakeRequest(
		ctx,
		"charactersRandom",
		`
query charactersRandom ($pageNumber: Int, $not_in: [Int]) {
	Page(perPage: 1, page: $pageNumber) {
		characters(sort: FAVOURITES_DESC, id_not_in: $not_in) {
			id
			siteUrl
			image {
				large
			}
			name {
				full
			}
			media(perPage: 1, sort: POPULARITY_DESC) {
				nodes {
					title {
						romaji
					}
				}
			}
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func user(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*userResponse, error) {
	__input := __userInput{
		Name: name,
	}
	var err error

	var retval userResponse
	err = client.MakeRequest(
		ctx,
		"user",
		`
query user ($name: String) {
	Page(page: 1, perPage: 3) {
		users(search: $name) {
			id
			name
			about
			siteUrl
			avatar {
				large
			}
			bannerImage
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func media(
	ctx context.Context,
	client graphql.Client,
	name string,
	typ MediaType,
) (*mediaResponse, error) {
	__input := __mediaInput{
		Name: name,
		Typ:  typ,
	}
	var err error

	var retval mediaResponse
	err = client.MakeRequest(
		ctx,
		"media",
		`
query media ($name: String, $typ: MediaType) {
	Page(page: 1, perPage: 3) {
		media(search: $name, type: $typ) {
			id
			title {
				romaji
			}
			description
			siteUrl
			coverImage {
				large
				color
			}
			bannerImage
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
